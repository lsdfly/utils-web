! function(global) {
    console.log('ss', global)

    function getCurrentScript() {
        // 返回其所包含的脚本中正在被执行的 <script> 元素.
        var _currentScript = document.currentScript;
        //如果不支持用其他方法实现
        if (!_currentScript) {
            var _scripts = document.scripts;
            _currentScript = _scripts[_scripts.length - 1];
        }
        return _currentScript
    }
    //window error fun
    // function r(e, t, r) {
    //这个应该是用来储存被人
    function r(e, type, callback) {

        var n = e[type];
        console.log('ssss',n)
        e[type] = callback(n);
    }

    function n(e) {
        return "function" != typeof e ? e : (e.__injected__ || (e.__injected__ = function() {
            try {
                return e.apply(this, arguments);
            } catch (e) {
                throw s(e), w = true, e
            }
        }), e.__injected__)
    }
    //验证是否是真的appkey
    function isAppkey(apikey, noLog) {
        var reg = /^[0-9a-z]{64}$/i;
        // console.log('ee99', apikey)
        if (apikey) {
            if (!!apikey.match(reg)) {
                return true;
            }
            if (!noLog) {
                console.error("Fundebug: apikey格式错误2");
            }
            return false;
            // return !!apikey.match(reg) || (noLog || console.error("Fundebug: apikey格式错误"), false);
        }
        if (!noLog) {
            console.error("Fundebug: apikey格式错误");
        }
        return false;
        // return (t || console.error("Fundebug: 请配置apikey0"), false);
        // return apikey ? !!apikey.match(reg) || (t || console.error("Fundebug: apikey格式错误"), false) : (t || console.error("Fundebug: 请配置apikey0"), false)
    }

    function getErrorMsg(t) {
        if (!t) {
            return null;
        }
        // debugger;
        var obj = {};
        // return global.XMLHttpRequest ? r = {
        //     name: t.name,
        //     message: t.message,
        //     fileName: t.fileName || t.sourceURL,
        //     lineNumber: t.lineNumber || t.line,
        //     columnNumber: t.columnNumber || t.column
        // } : r.message = t.message, r
        if (global.XMLHttpRequest) {
            obj = {
                name: t.name,
                message: t.message,
                fileName: t.fileName || t.sourceURL,
                lineNumber: t.lineNumber || t.line,
                columnNumber: t.columnNumber || t.column
            }
            return obj;
        }
        obj.message = t.message
        return obj;
    }
    //获取堆栈跟踪
    function getStacktrace() {
        var stack;
        try {
            throw new Error("")
        } catch (t) {
            stack = t.stack
        }
        // console.log(e);
        if (stack) {
            // return
            // e = e.replace(/(.*?)fundebug(.*?)\.js(.*)\n?/gm, ""),
            //  e = e.replace(/^Error\n/g, ""),
            //   e = "generated-stack:\n" + e
            stack = stack.replace(/(.*?)fundebug(.*?)\.js(.*)\n?/gm, "");
            stack = stack.replace(/^Error\n/g, "");
            stack = "generated-stack:\n" + stack;
            // console.log(e);
            return stack;
        }
    }

    function getStack() {
        for (var e, t = [], r = arguments.callee.caller.caller; r && t.length < 10;) {
            var n = r.toString().match(/function\s*([\w\_$]+)?\s*\(/i);
            e = n && n[1] || "[anonymous]", t.push(e), r = r.caller
        }
        return "generated-stack:\n" + t.join("\n")
    }

    function s(e) {
        if (e) {
            var t = e.stack;
            t = t.replace(/(.*?)fundebug(.*?)\.js(.*)\n?/gm, "");
            var error = getErrorMsg(e);
            h({
                name: error.name || "uncaught error",
                message: error.message,
                fileName: error.fileName,
                lineNumber: error.lineNumber,
                columnNumber: error.columnNumber,
                stacktrace: t,
                severity: "error",
                type: "uncaught"
            })
        }
    }
    //    function l(node) {
    function errorCallBack(node) {
        // function l(t) {
        if (!fundebug.silentResource && !node.message) {
            var elem;
            elem = node.target ? node.target : node.srcElement;
            var outerHTML = elem && elem.outerHTML;
            outerHTML && outerHTML.length > 200 && (outerHTML = outerHTML.slice(0, 200));
            var a = {
                type: "resourceError",
                target: {
                    outerHTML: outerHTML,
                    src: elem && elem.src,
                    tagName: elem && elem.tagName,
                    id: elem && elem.id,
                    className: elem && elem.className,
                    name: elem && elem.name,
                    type: elem && elem.type,
                    XPath: getXPath(elem),
                    selector: getSelector(elem),
                    timeStamp: node.timeStamp
                }
            };
            if (elem.src !== global.location.href && (!elem.src || !elem.src.match(/.*\/(.*)$/) || elem.src.match(/.*\/(.*)$/)[1]) && a.target.src && global.XMLHttpRequest) {
                var xhr = new XMLHttpRequest;
                xhr.Fundebug = true;
                xhr.open("HEAD", a.target.src);
                xhr.send();
                xhr.onload = function(e) {
                    200 !== e.target.status && (a.target.status = e.target.status, a.target.statusText = e.target.statusText);
                    h(a)
                }
            }
        }
    }

    // function c(e) {
    function getXPath(elem) {
        for (var t = []; elem && elem.nodeType == Node.ELEMENT_NODE; elem = elem.parentNode) {
            var r, n = 0,
                a = false;
            //返回列表项的 previousSibling（前一个同胞节点）：
            for (r = elem.previousSibling; r; r = r.previousSibling) {
                //	文档类型名称DOCUMENT_TYPE_NODE
                r.nodeType != Node.DOCUMENT_TYPE_NODE && r.nodeName == elem.nodeName && ++n;
            }
            //返回列表项的下一个同胞：nextSibling
            for (r = elem.nextSibling; r && !a; r = r.nextSibling) {
                r.nodeName == elem.nodeName && (a = true);
            }
            var i = (elem.prefix ? elem.prefix + ":" : "") + elem.localName,
                o = n || a ? "[" + (n + 1) + "]" : "";
            t.splice(0, 0, i + o)
        }
        return t.length ? "/" + t.join("/") : null
    }

    // function m(e) {
    function getSelector(elem) {
        for (var t = []; elem.parentNode;) {
            if (elem.id) {
                t.unshift("#" + elem.id);
                break
            }
            if (elem == elem.ownerDocument.documentElement) {
                t.unshift(elem.tagName);
            } else {
                for (var r = 1, n = elem; n.previousElementSibling; n = n.previousElementSibling, r++);
                t.unshift(elem.tagName + ":nth-child(" + r + ")")
            }
            elem = elem.parentNode
        }
        return t.join(" > ")
    }

    // function f(e) {
    //添加日志
    function pushRecord(e) {
        //只保留20条操作记录
        // x.push(e), x.length > 20 && x.shift()
        breadcrumbs.push(e);
        if (breadcrumbs.length > 20) {
            breadcrumbs.shift();
        }
    }

    // function p(_node) {
    //单击事件回调
    function collectClickEvents(_node) {
        var elem;
        elem = _node.target ? _node.target : _node.srcElement;
        var _outerHTML = elem && elem.outerHTML;
        // n && n.length > 200 &&
        if (_outerHTML) {
            // (
            if (_outerHTML.length > 200) {
                _outerHTML = _outerHTML.slice(0, 200);
            }
            //),
            pushRecord({
                type: "click",
                page: {
                    url: global.location.href,
                    title: document.title
                },
                detail: {
                    outerHTML: _outerHTML,
                    tagName: elem && elem.tagName,
                    id: elem && elem.id,
                    className: elem && elem.className,
                    name: elem && elem.name
                },
                time: (new Date).getTime()
            })
        }
    }
    //单页面跳转处理
    function goPage(from, to) {
        M = to;
        var obj = {
            type: "navigation",
            detail: { from: from, to: to },
            time: (new Date).getTime()
        };
        pushRecord(obj)
    }
    // 重新浏览器的console
    function rewriteConsole(level) {
        //level 打印的级别 如log error
        var output = console[level];
        console[level] = function() {
            var n = {
                type: "console",
                page: { url: global.location.href, title: document.title },
                detail: {
                    level: level,
                    arguments: Array.prototype.slice.apply(arguments).join(" ")
                },
                time: (new Date).getTime()
            };
            if (fundebug.silentConsole || pushRecord(n), "function" == typeof output)
                if (output.apply) {
                    output.apply(console, arguments);
                } else {
                    var a = Array.prototype.slice.apply(arguments).join(" ");
                    output(a)
                }
        }
    }
    //检查是否上报
    function isReport(e) {
        //检查是否上报 本地不上报  200-299状态代表不上报
        return !fundebug.silentHttp &&
            (
                (0 !== e.detail.status || !/^file:\/\/\//.test(e.detail.url)) &&
                2 !== parseInt(e.detail.status / 100)
            )
    }

    function h(upload) {
        if (isAppkey(currentScript.getAttribute("apikey") ||
                fundebug.apikey) &&
            fundebug.maxEventNumber &&
            !fundebug.silent) {
            fundebug.maxEventNumber -= 1;
            var sendData = {
                notifierVersion: "0.3.4",
                userAgent: global.navigator.userAgent,
                locale: global.navigator.language || global.navigator.userLanguage,
                url: global.location.href,
                title: document.title,
                appVersion: currentScript.getAttribute("appversion") || fundebug.appversion,
                apiKey: currentScript.getAttribute("apikey") || fundebug.apikey,
                releaseStage: currentScript.getAttribute("releasestage") || fundebug.releasestage,
                metaData: upload.metaData || fundebug.metaData,
                user: upload.user || fundebug.user,
                name: upload.name,
                time: (new Date).getTime(),
                message: upload.message,
                fileName: upload.fileName,
                lineNumber: upload.lineNumber,
                columnNumber: upload.columnNumber,
                stacktrace: upload.stacktrace,
                type: upload.type,
                severity: upload.severity,
                target: upload.target,
                req: upload.req,
                res: upload.res,
                breadcrumbs: breadcrumbs
            };
            // r.userAgent && r.userAgent.match(/Googlebot/) || y(r) || sendData(r);
            //如果有ua，且不是谷歌机器人 就准备发送数据吧
            if (sendData.userAgent && !sendData.userAgent.match(/Googlebot/)) {
                noReport(sendData) || startSendData(sendData);
            }
        }
    }
    //不上报数据
    function noReport(data) {
        // 过滤的字段不上报

        var filters = fundebug.filters;
        if (!filters || !filters.length) {
            return false;
        }
        for (var i = 0; i < filters.length; i++) {
            if (isFilter(data, filters[i])) {
                return true;
            }
        }

        return false
    }
    // 是否字段在过滤列表
    function isFilter(data, filters) {
        if (!data) {
            // 空对象
            return false;
        }
        //如果对象为空
        if (Object.keys && !Object.keys(filters).length) {
            // 对象为空
            return false;
        }
        for (var r in filters) {
            if (filters.hasOwnProperty(r)) {
                //如果是正则过滤
                if (filters[r].constructor === RegExp) {
                    if (!filters[r].test(data[r])) {
                        return false;
                    }
                } else {
                    //对象
                    if (filters[r].constructor !== Object) {
                        return false;
                    }
                    if (!isFilter(data[r], filters[r])) {
                        return false;
                    }
                }
            }
        }
        return true
    }
    //序列化JSON
    function stringify(obj) {
        if ("undefined" != typeof JSON) {
            return JSON.stringify(obj);
        }
        if (obj instanceof Array) {
            for (var t = [], r = 0; r < obj.length; r++) {
                t.push(stringify(obj[r]));
            }
            return "[" + t.join(",") + "]"
        }
        var n = [];
        for (var a in obj)
            if (obj.hasOwnProperty(a)) {
                var i = '"' + a + '":',
                    o = obj[a];
                o && ("object" == typeof o ? i += stringify(o) : "number" == typeof o ? i += o : i = i + '"' + o.replace(/\n/g, "\\n") + '"', n.push(i))
            }
        return "{" + n.join(",") + "}"
    }

    function getSendData(data) {
        var str;
        try {
            str = stringify(data)
        } catch (r) {
            delete data.metaData;
            try {
                str = stringify(data)
            } catch (e) {
                return
            }
        }
        return str;
    }

    function startSendData(data) {
        var strData = getSendData(data);
        if (strData) {
            var url = k;
            // debugger;
            //如果支持这样请求
            if (global.XMLHttpRequest && global.atob) {
                var xhr = new XMLHttpRequest;
                xhr.Fundebug = true;
                xhr.open("POST", url);
                xhr.setRequestHeader("Content-Type", "application/json");
                xhr.send(strData);
                // debugger;
            } else {
                (new Image).src = n + "?event=" + encodeURIComponent(strData)
            }
        }
    }
    var k = "https://fundebug.com/javascript/",
        fundebug = {};
    global.fundebug = fundebug;
    var w = false,
        currentScript = getCurrentScript();

    fundebug.silent = currentScript.getAttribute("silent") || false;
    fundebug.maxEventNumber = currentScript.getAttribute("maxEventNumber") || 10;
    fundebug.silentResource = currentScript.getAttribute("silentResource") || false;
    fundebug.silentHttp = currentScript.getAttribute("silentHttp") || false;
    fundebug.silentConsole = fundebug.silentConsole || currentScript.getAttribute("silentConsole") || false;

    r(global, "onerror", function(e) {
        console.log('onerror')
        e.apply(this,arguments)
        // debugger;
        return function(t, r, lineNumber, columnNumber, stacktrace) {
            
            if (w) {
                //赋值返回 undefined
                return void(w = false);
            }
            void 0 === columnNumber && e.event && (columnNumber = e.event.errorCharacter);
            var fileName;
            // s = r && r !== global.location.href ? r : null;
            if (s && r !== global.location.href) {
                fileName = r;
            } else {
                fileName = null;
            }
            var error = getErrorMsg(stacktrace);
            h({
                message: t,
                lineNumber: lineNumber,
                columnNumber: columnNumber,
                fileName: fileName || error && error.fileName,
                name: error && error.name || "uncaught error",
                stacktrace: stacktrace && stacktrace.stack || getStack(),
                severity: "error",
                type: "uncaught"
            })
            return false;
        }
    });
    var H = true;
    // debugger;
    if (global.atob) {
        if (global.ErrorEvent)
            try {
                if (global.ErrorEvent.prototype.hasOwnProperty("error")) {
                    H = false;
                }
                //  && (H = false)
            } catch (e) {

            }
    } else {
        H = false;
    }
    // H = true;//模拟
    "EventTarget Window Node ApplicationCache AudioTrackList ChannelMergerNode CryptoOperation EventSource startTimeileReader HTMLUnknownElement IDBDatabase IDBRequest IDBTransaction KeyOperation MediaController MessagePort ModalWindow Notification SVGElementInstance Screen TextTrack TextTrackCue TextTrackList WebSocket WebSocketWorker Worker XMLHttpRequest XMLHttpRequestEventTarget XMLHttpRequestUpload"
    .replace(/\w+/g, function(t) {
        if (H) {
            var a = global[t] && global[t].prototype;
            a && a.hasOwnProperty && a.hasOwnProperty("addEventListener") && (r(a, "addEventListener", function(e) {
                return function(t, r, a, i) {
                    return r && r.handleEvent && (r.handleEvent = n(r.handleEvent));
                    e.call(this, t, n(r), a, i)
                }
            }), r(a, "removeEventListener", function(e) {
                return function(t, r, a) {
                    return e.call(this, t, r, a), e.call(this, t, n(r), a)
                }
            }))
        }
    });
    fundebug.notify = function(name, t, r) {
        if (name) {
            var n = {
                    name: name || r && r.name,
                    message: t || r && r.message,
                    severity: r && r.message || "warning",
                    // stacktrace: o(),
                    stacktrace: getStacktrace(),
                    type: "notification",
                    user: r && r.user,
                    metaData: r && r.metaData
                },
                apikey = currentScript.getAttribute("apikey") || fundebug.apikey;
            //  return isAppkey(apikey, true) ?
            //       (h(n), "fundebug.com" === location.host ? "亲，不要在Fundebug网站测试哦；请将Fundebug插件集成到您的网站，然后进行测试!" 
            //: "请查看邮箱以及Fundebug控制台!") : apikey ? "apikey格式错误0" : "请配置apikey"
            if (isAppkey(apikey, true)) {
                h(n);
                if ("fundebug.com" === location.host) {
                    return "亲，不要在Fundebug网站测试哦；请将Fundebug插件集成到您的网站，然后进行测试!";
                }
                return "请查看邮箱以及Fundebug控制台!";
            } else {
                return apikey ? "apikey格式错误0" : "请配置apikey";
            }
        }
    };
    fundebug.notifyError = function(t, r) {
        if (t) {
            global.console && console.error(t);
            var n = getErrorMsg(t);
            h({
                name: n.name || r && r.name || "caught error",
                message: n.message || r && r.message,
                stacktrace: t.stack,
                fileName: n.fileName,
                lineNumber: n.lineNumber,
                columnNumber: n.columnNumber,
                severity: r && r.severity || "error",
                type: "caught",
                user: r && r.user,
                metaData: r && r.metaData
            })
        }
    };
    fundebug.notifyHttpError = function(req, res, r) {
        h({
            type: "httpError",
            req: e,
            res: res,
            user: r && r.user,
            metaData: r && r.metaData
        });
    };
    // global.addEventListener && 
    // global.addEventListener && 
    //储存记录的数组 原来x 
    var breadcrumbs = [];
    var M = {
        url: global.location.href
    };
    if (global.addEventListener) {
        global.addEventListener("unhandledrejection", function(e) {
            fundebug.notifyError(e.reason)
        });
        global.addEventListener("error", errorCallBack, true);
        global.addEventListener("click", collectClickEvents, true);
        document.addEventListener("DOMContentLoaded", function() {
            M = {
                url: global.location.href,
                title: document.title
            }
        })
    } else {
        document.attachEvent("onclick", collectClickEvents);
        // 当请求被发送到服务器时，我们需要执行一些基于响应的任务。
        // 每当 readyState 改变时，就会触发 onreadystatechange 事件。
        // readyState 属性存有 XMLHttpRequest 的状态信息。
        document.attachEvent("onreadystatechange", function() {
            M = {
                url: global.location.href,
                title: document.title
            }
        });
    }

    // document.addEventListener ?  :
    var onpopstate = global.onpopstate;
    global.onpopstate = function() {
        var t = {
            url: global.location.href
        };
        if (M.title || (M.title = document.title), M.url !== t.url) {
            goPage(M, t);
            if (onpopstate) {
                return onpopstate.apply(this, arguments);
            }

        }
    };
    var pushState = global.history.pushState;
    global.history.pushState = function() {
        M = {
            url: global.location.href,
            title: document.title
        };
        var t = {};
        //如果有三个参数 ，则将第三个参数赋值给url 判断赋值的url和当前url是否相等
        if (3 === arguments.length && (t.url = arguments[2]), M.url !== t.url) {
            goPage(M, t);
            if (pushState) {
                return pushState.apply(this, arguments);
            }

        }

    };
    var onhashchange = global.onhashchange;
    global.onhashchange = function() {
        var t = {
            url: global.location.href,
            title: document.title
        };
        // if (M.url !== t.url && goPage(M, t), onhashchange) {
        // 跳转的地址不是上次的地址，就记录地址
        if (M.url !== t.url) {
            goPage(M, t);
            if (onhashchange) {
                return onhashchange.apply(this, arguments);
            }

        }

    };
    var consoles = ["log", "warn", "error", "debug", "info"];
    for (var _i = 0; _i < consoles.length; _i++) {
        global.console && rewriteConsole(consoles[_i]);
    }
    var refuse = false;
    //重写XMLHttpRequest 拦截ajax请求
    if (global.XMLHttpRequest) {
        var XHR = XMLHttpRequest.prototype;
        if (!XHR) return;
        var type,
            url,
            startTime, //请求开始时间
            open = XHR.open;
        XHR.open = function(method, reqUrl) {
            type = method,
                url = reqUrl,
                startTime = (new Date).getTime();
            try {
                open.apply(this, arguments)
            } catch (e) {
                refuse = true;
                fundebug.notifyError(e, {
                    metaData: {
                        description: "XMLHttpRequest请求失败(如果是拒绝访问，则是由于浏览器跨域限制)",
                        method: type,
                        httpUrl: url
                    }
                })
            }
        };
        var send = XHR.send;
        XHR.send = function() {
            //如果发生了错误
            if (refuse) {
                refuse = false;
                return void(0);
            }
            var _this = this,
                onreadystatechange = _this.onreadystatechange;
            _this.onreadystatechange = function() {
                if (4 === _this.readyState && !_this.Fundebug && url != k) {
                    // 请求使用时间
                    var elapsedTime = (new Date).getTime() - startTime,
                        record = {
                            type: "XMLHttpRequest",
                            page: {
                                url: global.location.href
                            },
                            detail: {
                                method: type,
                                url: _this.responseURL || url,
                                status: _this.status,
                                statusText: _this.statusText
                            },
                            elapsedTime: elapsedTime,
                            time: startTime
                        };
                    // 是否上报
                    if (isReport(record)) {
                        var req = {
                                method: record.detail.method,
                                url: record.detail.url
                            },
                            res = {
                                status: t.status,
                                statusText: t.statusText,
                                response: t.response,
                                elapsedTime: elapsedTime
                            };
                        fundebug.notifyHttpError(req, res);
                    }
                    pushRecord(record);
                }
                //重新返回状态给调用者
                onreadystatechange && onreadystatechange.apply(this, arguments)
            };
            send.apply(this, arguments);
        }
    }
    if (global.fetch) {
        var U = global.fetch;
        global.fetch = function(t, r) {
            var startTime = (new Date).getTime();
            return U.apply(this, arguments)
                .then(function(t) {
                    //获取请求使用时间
                    var elapsedTime = (new Date).getTime() - startTime,
                        record = {
                            type: "fetch",
                            page: {
                                url: global.location.href,
                                title: document.title
                            },
                            detail: {
                                method: r && r.method || "GET",
                                url: t.url,
                                status: t.status,
                                statusText: t.statusText
                            },
                            elapsedTime: elapsedTime,
                            time: startTime
                        };
                    // 是否上报
                    if (isReport(record)) {
                        var req = {
                                method: record.detail.method,
                                url: record.detail.url
                            },
                            res = {
                                status: t.status,
                                statusText: t.statusText,
                                elapsedTime: elapsedTime
                            };
                        fundebug.notifyHttpError(req, res);
                    }
                    pushRecord(record);
                    return t;
                })
        }
    }
    var isDefine = "function" == typeof define,
        isModule = "undefined" != typeof module && module.exports;
    if (isDefine) {
        define(L);
    } else if (isModule) {
        module.exports = L
    }
    // isDefine ? define(L) : isModule && (module.exports = L)
}(window);